"""Make string uppercase"""
directive @upper on FIELD

directive @replace(old: String!, new: String!) on FIELD

"""Make get stuff uppercase"""
directive @relation(on: String!) on FIELD

type SliderAssignWidget implements AssignWidget {
  kind: AssignWidgetKind!
  followValue: String
  min: Float
  max: Float
  step: Float
}

interface AssignWidget {
  kind: AssignWidgetKind!
  followValue: String
}

"""The kind of assign widget."""
enum AssignWidgetKind {
  SEARCH
  CHOICE
  SLIDER
  CUSTOM
  STRING
  STATE_CHOICE
}

type ChoiceAssignWidget implements AssignWidget {
  kind: AssignWidgetKind!
  followValue: String
  choices: [Choice!]
}

type Choice {
  label: String!
  value: String!
  image: String
  description: String
}

type SearchAssignWidget implements AssignWidget {
  kind: AssignWidgetKind!
  followValue: String
  query: String!
  ward: String!
  filters: [Port!]
  dependencies: [String!]
}

type Port {
  key: String!
  scope: PortScope!
  label: String
  kind: PortKind!
  description: String
  identifier: Identifier
  nullable: Boolean!
  effects: [Effect!]
  default: AnyDefault
  children: [Port!]
  assignWidget: AssignWidget
  returnWidget: ReturnWidget
  validators: [Validator!]
}

"""The kind of port"""
enum PortScope {
  GLOBAL
  LOCAL
}

"""The kind of port."""
enum PortKind {
  INT
  STRING
  STRUCTURE
  LIST
  BOOL
  DICT
  FLOAT
  DATE
  UNION
  MODEL
}

"""
The `ArrayLike` scalar type represents a reference to a store previously created by the user n a datalayer
"""
scalar Identifier

interface Effect {
  dependencies: [String!]!
  kind: EffectKind!
  function: ValidatorFunction!
}

"""The kind of effect."""
enum EffectKind {
  MESSAGE
  HIDE
  CUSTOM
}

"\n    The `Validator` scalar represents a javascript function that should execute on the client side (inside a shadow realm)\n      to validate a value (or a set of values) before it is sent to the server.  The function has two parameters (value, otherValues) and should return a string if the value is invalid and undefined if the value is valid.\n        The otherValues parameter is an object with the other values in the form {fieldName: value}."
scalar ValidatorFunction

"""
The `ArrayLike` scalar type represents a reference to a store previously created by the user n a datalayer
"""
scalar AnyDefault

interface ReturnWidget {
  kind: ReturnWidgetKind!
}

"""The kind of return widget."""
enum ReturnWidgetKind {
  CHOICE
  CUSTOM
}

type Validator {
  function: ValidatorFunction!
  dependencies: [String!]
  label: String
  errorMessage: String
}

type StateChoiceAssignWidget implements AssignWidget {
  kind: AssignWidgetKind!
  followValue: String
  stateChoices: String!
}

type CustomReturnWidget implements ReturnWidget {
  kind: ReturnWidgetKind!
  hook: String!
  ward: String!
}

type ChoiceReturnWidget implements ReturnWidget {
  kind: ReturnWidgetKind!
  choices: [Choice!]
}

type StringAssignWidget implements AssignWidget {
  kind: AssignWidgetKind!
  followValue: String
  placeholder: String!
  asParagraph: Boolean!
}

type CustomAssignWidget implements AssignWidget {
  kind: AssignWidgetKind!
  followValue: String
  hook: String!
  ward: String!
}

type CustomEffect implements Effect {
  dependencies: [String!]!
  kind: EffectKind!
  function: ValidatorFunction!
  hook: String!
  ward: String!
}

type MessageEffect implements Effect {
  dependencies: [String!]!
  kind: EffectKind!
  function: ValidatorFunction!
  message: String!
}

interface UIChild {
  kind: UIChildKind!
}

enum UIChildKind {
  GRID
  SPLIT
  RESERVATION
  STATE
}

type UIGrid implements UIChild {
  kind: UIChildKind!
  rowHeight: Int!
  columns: Int!
  children: [UIGridItem!]!
}

type UIGridItem {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
  minW: Int!
  maxW: Int!
  child: UIChild!
}

type UISplit implements UIChild {
  kind: UIChildKind!
  left: UIChild!
  right: UIChild!
}

type UIState implements UIChild {
  kind: UIChildKind!
  state: String!
}

type Query {
  clients(filters: AppFilter, order: AppOrder, pagination: OffsetPaginationInput): [App!]!
  hardwareRecords(filters: HardwareRecordFilter, pagination: OffsetPaginationInput): [HardwareRecord!]!
  agents(filters: AgentFilter, order: AgentOrder, pagination: OffsetPaginationInput): [Agent!]!
  nodes(filters: NodeFilter, order: NodeOrder, pagination: OffsetPaginationInput): [Node!]!
  protocols(filters: ProtocolFilter, order: ProtocolOrder, pagination: OffsetPaginationInput): [Protocol!]!
  templates(filters: TemplateFilter, pagination: OffsetPaginationInput): [Template!]!
  testResults(filters: TestResultFilter, pagination: OffsetPaginationInput): [TestResult!]!
  testCases(filters: TestCaseFilter, pagination: OffsetPaginationInput): [TestCase!]!
  reservations(instanceId: InstanceId = null): [Reservation!]!
  myreservations(instanceId: InstanceId = null): [Reservation!]!
  shortcuts(filters: ShortcutFilter, order: ShortcutOrder, pagination: OffsetPaginationInput): [Shortcut!]!
  toolboxes(filters: ToolboxFilter, order: ToolboxOrder, pagination: OffsetPaginationInput): [Toolbox!]!
  dashboards: [Dashboard!]!
  states: [State!]!
  panels: [Panel!]!
  stateSchemas: [StateSchema!]!
  node(id: ID = null, reservation: ID = null, assignation: ID = null, template: ID = null, agent: ID = null, interface: String = null, hash: NodeHash = null): Node!
  assignations(instanceId: InstanceId = null): [Assignation!]!
  event(id: ID = null): [AssignationEvent!]!
  templateAt(agent: ID!, extension: String = null, interface: String = null, nodeHash: String = null): Template!
  myTemplateAt(instanceId: String!, nodeId: ID = null, interface: String = null): Template!
  stateFor(template: ID = null, agent: ID = null, stateHash: String = null): State!
  state(id: ID!): State!
  panel(id: ID!): Panel!
  stateSchema(id: ID!): StateSchema!
  toolbox(id: ID!): Toolbox!
  shortcut(id: ID!): Shortcut!
  hardwareRecord(id: ID!): HardwareRecord!
  agent(id: ID!): Agent!
  dashboard(id: ID!): Dashboard!
  dependency(id: ID!): Dependency!
  testCase(id: ID!): TestCase!
  testResult(id: ID!): TestResult!
  reservation(id: ID!): Reservation!
  template(id: ID!): Template!
  assignation(id: ID!): Assignation!
}

type App {
  id: ID!
  name: String!
  clientId: String!
}

"""A way to filter apps"""
input AppFilter {
  interface: StrFilterLookup
  ids: [ID!]
  hasTemplatesFor: [NodeHash!]
  mine: Boolean
  AND: AppFilter
  OR: AppFilter
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: String
  nIExact: String
  nContains: String
  nIContains: String
  nInList: [String!]
  nGt: String
  nGte: String
  nLt: String
  nLte: String
  nStartsWith: String
  nIStartsWith: String
  nEndsWith: String
  nIEndsWith: String
  nRange: [String!]
  nIsNull: Boolean
  nRegex: String
  nIRegex: String
}

"""
The `ArrayLike` scalar type represents a reference to a store previously created by the user n a datalayer
"""
scalar NodeHash

"""A way to order apps"""
input AppOrder {
  definedAt: Ordering
}

enum Ordering {
  ASC
  DESC
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

type HardwareRecord {
  id: ID!
  cpuCount: Int!
  cpuVendorName: String!
  cpuFrequency: Float!
  createdAt: DateTime!
  agent: Agent!
}

"""Date with time (isoformat)"""
scalar DateTime

type Agent {
  id: ID!
  instanceId: InstanceId!
  registry: Registry!
  hardwareRecords(filters: HardwareRecordFilter, pagination: OffsetPaginationInput): [HardwareRecord!]!
  templates(filters: TemplateFilter, pagination: OffsetPaginationInput): [Template!]!
  lastSeen: DateTime
  connected: Boolean!
  extensions: [String!]!
  name: String!
  states: [State!]!
  template(interface: String!): Template
  active: Boolean!
  latestHardwareRecord: HardwareRecord
  pinned: Boolean!
}

"""
The `ArrayLike` scalar type represents a reference to a store previously created by the user n a datalayer
"""
scalar InstanceId

type Registry {
  id: ID!
  app: App!
  user: User!
  agents(filters: AgentFilter, order: AgentOrder, pagination: OffsetPaginationInput): [Agent!]!
}

type User {
  id: ID!
}

"""A way to filter agents"""
input AgentFilter {
  """Filter by client ID of the app the agent is registered to"""
  clientId: String = null

  """Filter by instance ID of the agent"""
  instanceId: String = null

  """Filter by IDs of the agents"""
  ids: [ID!] = null

  """Filter by extensions of the agents"""
  extensions: [String!] = null

  """Filter by templates of the agents"""
  hasTemplates: [String!] = null

  """Filter by states of the agents"""
  hasStates: [String!] = null

  """Filter by pinned agents"""
  pinned: Boolean = null

  """Filter by name of the agents"""
  search: String = null
  distinct: Boolean
  AND: AgentFilter
  OR: AgentFilter
}

input AgentOrder {
  lastSeen: Ordering
}

input HardwareRecordFilter {
  ids: [ID!]
  cpuVendorName: String
  AND: HardwareRecordFilter
  OR: HardwareRecordFilter
}

type Template {
  id: ID!
  interface: String!
  extension: String!
  agent: Agent!
  node: Node!
  params: AnyDefault!
  dependencies(filters: DependencyFilter, pagination: OffsetPaginationInput): [Dependency!]!
  dependencyGraph: DependencyGraph!
  name: String!
  pinned: Boolean!
  myLatestAssignation: Assignation
}

type Node {
  id: ID!
  hash: NodeHash!
  name: String!
  kind: NodeKind!
  stateful: Boolean!
  description: String
  collections: [Collection!]!
  templates(filters: TemplateFilter, pagination: OffsetPaginationInput): [Template!]!
  scope: NodeScope!
  isTestFor(filters: NodeFilter, order: NodeOrder, pagination: OffsetPaginationInput): [Node!]!
  isDev: Boolean!
  tests(filters: NodeFilter, order: NodeOrder, pagination: OffsetPaginationInput): [Node!]!
  interfaces: [String!]!
  protocols(filters: ProtocolFilter, order: ProtocolOrder, pagination: OffsetPaginationInput): [Protocol!]!
  definedAt: DateTime!
  reservations(filters: ReservationFilter, pagination: OffsetPaginationInput): [Reservation!]
  testCases(filters: TestCaseFilter, pagination: OffsetPaginationInput): [TestCase!]
  runs: [Assignation!]
  dependencyGraph: DependencyGraph!
  args: [Port!]!
  returns: [Port!]!
  portGroups: [PortGroup!]!
  pinned: Boolean!
}

"""The kind of node."""
enum NodeKind {
  FUNCTION
  GENERATOR
}

type Collection {
  id: ID!
  name: String!
  nodes(filters: NodeFilter, order: NodeOrder, pagination: OffsetPaginationInput): [Node!]!
}

input NodeFilter {
  search: String
  name: StrFilterLookup
  ids: [ID!]
  demands: [PortDemandInput!]
  protocols: [String!]
  kind: NodeKind
  AND: NodeFilter
  OR: NodeFilter
}

"""The input for creating a port demand."""
input PortDemandInput {
  """The kind of the demand. You can ask for args or returns"""
  kind: DemandKind!

  """The matches of the demand. """
  matches: [PortMatchInput!] = null

  """
  Require that the node has a specific number of ports. This is used to identify the demand in the system.
  """
  forceLength: Int = null

  """
  Require that the node has a specific number of non-nullable ports. This is used to identify the demand in the system.
  """
  forceNonNullableLength: Int = null

  """
  Require that the node has a specific number of structure ports. This is used to identify the demand in the system.
  """
  forceStructureLength: Int = null
}

enum DemandKind {
  ARGS
  RETURNS
}

"""The input for creating a port match."""
input PortMatchInput {
  """The index of the port to match. """
  at: Int = null

  """The key of the port to match."""
  key: String = null

  """The kind of the port to match. """
  kind: PortKind = null

  """The identifier of the port to match. """
  identifier: String = null

  """Whether the port is nullable. """
  nullable: Boolean = null

  """The matches for the children of the port to match. """
  children: [PortMatchInput!] = null
}

input NodeOrder {
  definedAt: Ordering
}

input TemplateFilter {
  interface: StrFilterLookup
  ids: [ID!]
  nodeHash: NodeHash
  node: TemplateNodeFilter
  extension: String
  agent: TemplateAgentFilter
  parameters: [ParamPair!]
  AND: TemplateFilter
  OR: TemplateFilter
}

input TemplateNodeFilter {
  search: String
  name: String
  ids: [ID!]
  demands: [PortDemandInput!]
  protocols: [String!]
  kind: NodeKind
  AND: TemplateNodeFilter
  OR: TemplateNodeFilter
}

input TemplateAgentFilter {
  clientId: String
  instanceId: String
  ids: [ID!]
  extensions: [String!]
  hasTemplates: [String!]
  hasStates: [String!]
  AND: TemplateAgentFilter
  OR: TemplateAgentFilter
}

input ParamPair {
  key: String!
  value: String!
}

enum NodeScope {
  GLOBAL
  LOCAL
  BRIDGE_GLOBAL_TO_LOCAL
  BRIDGE_LOCAL_TO_GLOBAL
}

type Protocol {
  id: ID!
  name: String!
  nodes(filters: NodeFilter, order: NodeOrder, pagination: OffsetPaginationInput): [Node!]!
}

input ProtocolFilter {
  search: String
  name: StrFilterLookup
  ids: [ID!]
  AND: ProtocolFilter
  OR: ProtocolFilter
}

input ProtocolOrder {
  name: Ordering
}

type Reservation {
  id: ID!
  name: String!
  waiter: Waiter!
  title: String
  node: Node!
  updatedAt: DateTime!
  reference: String!
  templates(filters: TemplateFilter, pagination: OffsetPaginationInput): [Template!]!
  binds: Binds
  causingDependency: Dependency
  strategy: ReservationStrategy!
  viable: Boolean!
  happy: Boolean!
  template: Template
  dependencyGraph: DependencyGraph!
}

type Waiter {
  id: ID!
  instanceId: InstanceId!
  registry: Registry!
}

type Binds {
  templates: [ID!]!
  clients: [ID!]!
  desiredInstances: Int!
}

type Dependency {
  id: ID!
  template: Template!
  node: Node
  hash: NodeHash!
  initialHash: NodeHash!
  reference: String
  optional: Boolean!
  binds: Binds
  resolvable: Boolean!
}

"""The pattern of assignment of the reservation"""
enum ReservationStrategy {
  RANDOM
  ROUND_ROBIN
  LEAST_BUSY
  LEAST_TIME
  LEAST_LOAD
  DIRECT
}

type DependencyGraph {
  nodes: [NodeNodeInvalidNodeTemplateNode!]!
  edges: [DependencyEdgeImplementationEdge!]!
}

union NodeNodeInvalidNodeTemplateNode = NodeNode | InvalidNode | TemplateNode

type NodeNode {
  id: String!
  nodeId: String!
  name: String!
  status: String
  reservationId: String
}

type InvalidNode {
  id: String!
  initialHash: String!
}

type TemplateNode {
  id: String!
  templateId: String!
  interface: String!
  clientId: String!
  status: String
  provisionId: String
  reservationId: String
  linked: Boolean!
  active: Boolean!
}

union DependencyEdgeImplementationEdge = DependencyEdge | ImplementationEdge

type DependencyEdge {
  id: String!
  source: String!
  target: String!
  optional: Boolean!
  depId: String!
  reservationId: String
}

type ImplementationEdge {
  id: String!
  source: String!
  target: String!
  reservationId: String
  linked: Boolean!
}

"""A way to filter reservations"""
input ReservationFilter {
  waiter: WaiterFilter
  ids: [ID!]
  status: [ReservationStatus!]
  AND: ReservationFilter
  OR: ReservationFilter
}

"""A way to filter waiters"""
input WaiterFilter {
  instanceId: InstanceId!
  ids: [ID!]
  AND: WaiterFilter
  OR: WaiterFilter
}

enum ReservationStatus {
  ACTIVE
  INACTIVE
  UNHAPPY
  HAPPY
  UNCONNECTED
  ENDED
}

type TestCase {
  id: ID!
  tester: Node!
  node: Node!
  isBenchmark: Boolean!
  description: String!
  name: String!
  results(filters: TestResultFilter, pagination: OffsetPaginationInput): [TestResult!]!
}

type TestResult {
  id: ID!
  template: Template!
  tester: Template!
  case: TestCase!
  passed: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A way to filter test results"""
input TestResultFilter {
  name: StrFilterLookup
  ids: [ID!]
  AND: TestResultFilter
  OR: TestResultFilter
}

"""A way to filter test cases"""
input TestCaseFilter {
  name: StrFilterLookup
  ids: [ID!]
  AND: TestCaseFilter
  OR: TestCaseFilter
}

type Assignation {
  id: ID!
  reference: String
  isDone: Boolean!
  args: AnyDefault!

  """
  A root assignation is the root assignation that caused this assignation to be created. This mother is always created by intent (e.g a user action). If null, this assignation is the mother
  """
  root: Assignation

  """
  A parent assignation is the next assignation in the chain of assignations that caused this assignation to be created. Parents can be created by intent or by the system. If null, this assignation is the parent
  """
  parent: Assignation

  """
  If this assignation is the result of a reservation, this field will contain the reservation that caused this assignation to be created
  """
  reservation: Reservation

  """The node that this assignation is assigned to"""
  node: Node!

  """The template that this assignation is assigned to"""
  template: Template!

  """The status of this assignation"""
  latestEventKind: AssignationEventKind!

  """The latest instruct that was sent to this assignation"""
  latestInstructKind: AssignationInstructKind!
  statusMessage: String

  """The Waiter that this assignation was created by"""
  waiter: Waiter!
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  If true, this assignation will be deleted after the assignation is completed
  """
  ephemeral: Boolean!
  events: [AssignationEvent!]!
  instructs: [AssignationInstruct!]!
  arg(key: String!): Args
}

"""The event kind of the assignationevent"""
enum AssignationEventKind {
  BOUND
  QUEUED
  ASSIGN
  PROGRESS
  DISCONNECTED
  YIELD
  DONE
  LOG
  CANCELING
  CANCELLED
  INTERUPTING
  INTERUPTED
  ERROR
  CRITICAL
}

"""The event kind of the assignationevent"""
enum AssignationInstructKind {
  ASSIGN
  CANCEL
  STEP
  RESUME
  PAUSE
  INTERRUPT
  COLLECT
}

type AssignationEvent {
  id: ID!
  name: String!
  returns: AnyDefault
  assignation: Assignation!
  kind: AssignationEventKind!
  message: String
  level: LogLevel
  progress: Int
  createdAt: DateTime!
  reference: String!
}

enum LogLevel {
  DEBUG
  INFO
  ERROR
  WARN
  CRITICAL
}

type AssignationInstruct {
  id: ID!
  assignation: Assignation!
  kind: AssignationInstructKind!
  createdAt: DateTime!
}

"""The `Args` scalar type represents a Dictionary of arguments"""
scalar Args

type PortGroup {
  key: String!
  title: String
  description: String
  effects: [Effect!]
  ports: [String!]!
}

input DependencyFilter {
  ids: [ID!]
  AND: DependencyFilter
  OR: DependencyFilter
}

type State {
  id: ID!
  stateSchema: StateSchema!
  value: Args!
  agent: Agent!
  createdAt: DateTime!
  updatedAt: DateTime!
  historicalStates: [HistoricalState!]!
}

type StateSchema {
  id: ID!
  hash: String!
  name: String!
  ports: [Port!]!
}

type HistoricalState {
  id: ID!
  state: State!
  value: Args!
  archivedAt: DateTime!
}

type Shortcut {
  id: ID!
  name: String!
  description: String
  node: Node!
  template: Template
  toolboxes(filters: ToolboxFilter, order: ToolboxOrder, pagination: OffsetPaginationInput): [Toolbox!]!
  savedArgs: AnyDefault!
  allowQuick: Boolean!
  useReturns: Boolean!
  args: [Port!]!
  returns: [Port!]!
}

type Toolbox {
  id: ID!
  name: String!
  description: String!
  shortcuts(filters: ShortcutFilter, order: ShortcutOrder, pagination: OffsetPaginationInput): [Shortcut!]!
}

input ShortcutFilter {
  search: String
  ids: [ID!]
  demands: [PortDemandInput!]
  toolbox: ID
  AND: ShortcutFilter
  OR: ShortcutFilter
}

input ShortcutOrder {
  name: Ordering
}

input ToolboxFilter {
  search: String
  name: StrFilterLookup
  ids: [ID!]
  AND: ToolboxFilter
  OR: ToolboxFilter
}

input ToolboxOrder {
  name: Ordering
}

type Dashboard {
  id: ID!
  name: String
  panels: [Panel!]
  uiTree: UITree
}

type Panel {
  id: ID!
  kind: PanelKind!
  name: String!
  reservation: Reservation
  state: State
  accessors: [String!]
  submitOnLoad: Boolean!
  submitOnChange: Boolean!
}

enum PanelKind {
  STATE
  ASSIGN
}

type UITree {
  child: UIChild!
}

type Mutation {
  createTemplate(input: CreateTemplateInput!): Template!
  createForeignTemplate(input: CreateForeignTemplateInput!): Template!
  setExtensionTemplates(input: SetExtensionTemplatesInput!): [Template!]!
  ack(input: AckInput!): Assignation!
  assign(input: AssignInput!): Assignation!
  cancel(input: CancelInput!): Assignation!

  """Step a assignation"""
  step(input: StepInput!): Assignation!

  """Pause a assignation"""
  pause(input: PauseInput!): Assignation!

  """Resume a assignation"""
  resume(input: ResumeInput!): Assignation!
  interrupt(input: InterruptInput!): Assignation!
  reserve(input: ReserveInput!): Reservation!
  unreserve(input: UnreserveInput!): String!

  """Delete a template"""
  deleteTemplate(input: DeleteTemplateInput!): String!
  ensureAgent(input: AgentInput!): Agent!
  createTestCase(input: CreateTestCaseInput!): TestCase!
  createTestResult(input: CreateTestResultInput!): TestResult!
  createHardwareRecord(input: CreateHardwareRecordInput!): HardwareRecord!
  createDashboard(input: CreateDashboardInput!): Dashboard!
  createStateSchema(input: CreateStateSchemaInput!): StateSchema!
  createPanel(input: CreatePanelInput!): Panel!
  setState(input: SetStateInput!): State!
  updateState(input: UpdateStateInput!): State!
  archiveState(input: ArchiveStateInput!): StateSchema!
  pinAgent(input: PinInput!): Agent!
  pinTemplate(input: PinInput!): Template!
  createShortcut(input: CreateShortcutInput!): Shortcut!
  deleteShortcut(input: DeleteShortcutInput!): String!
  createToolbox(input: CreateToolboxInput!): Toolbox!

  """Collect data from a assignation"""
  collect(input: CollectInput!): [String!]!
  reinit(input: ReInitInput!): String!
  deleteAgent(input: DeleteAgentInput!): ID!
}

"""The input for creating a template."""
input CreateTemplateInput {
  template: TemplateInput!
  instanceId: InstanceId!
  extension: String!
}

"""
A template is a blueprint for a node. It is composed of a definition, a list of dependencies, and a list of params.
"""
input TemplateInput {
  definition: DefinitionInput!
  dependencies: [DependencyInput!]!
  interface: String
  params: AnyDefault = null
  dynamic: Boolean! = false
  logo: String = null
}

"A definition\n\n    Definitions are the building template for Nodes and provide the\n    information needed to create a node. They are primarly composed of a name,\n    a description, and a list of ports.\n\n    Definitions provide a protocol of input and output, and do not contain\n    any information about the actual implementation of the node ( this is handled\n    by a template that implements a node).\n\n\n\n\n    "
input DefinitionInput {
  """
  The description of the definition. This is the text that is displayed in the UI
  """
  description: String = null

  """
  The collections of the definition. This is used to group definitions together in the UI
  """
  collections: [String!]! = []

  """
  The name of the actions. This is used to uniquely identify the definition
  """
  name: String!

  """
  Whether the definition is stateful or not. If the definition is stateful, it can be used to create a stateful node. If the definition is not stateful, it cannot be used to create a stateful node
  """
  stateful: Boolean! = false

  """
  The port groups of the definition. This is used to group ports together in the UI
  """
  portGroups: [PortGroupInput!]! = []

  """The args of the definition. This is the input ports of the definition"""
  args: [PortInput!]! = []

  """
  The returns of the definition. This is the output ports of the definition
  """
  returns: [PortInput!]! = []

  """
  The kind of the definition. This is the type of the definition. Can be either a function or a generator
  """
  kind: NodeKind!

  """
  The tests for the definition. This is used to group definitions together in the UI
  """
  isTestFor: [String!]! = []

  """
  The interfaces of the definition. This is used to group definitions together in the UI
  """
  interfaces: [String!]! = []

  """
  Whether the definition is a dev definition or not. If the definition is a dev definition, it can be used to create a dev node. If the definition is not a dev definition, it cannot be used to create a dev node
  """
  isDev: Boolean! = false

  """The logo of the definition. This is used to display the logo in the UI"""
  logo: String = null
}

"""
A Port Group is a group of ports that are related to each other. It is used to group ports together in the UI and provide a better user experience.
"""
input PortGroupInput {
  """
  The key of the port group. This is used to uniquely identify the port group
  """
  key: String!
  title: String
  description: String
  effects: [EffectInput!] = []
  ports: [String!] = []
}

"\n                 An effect is a way to modify a port based on a condition. For example,\n    you could have an effect that sets a port to null if another port is null.\n\n    Or, you could have an effect that hides the port if another port meets a condition.\n    E.g when the user selects a certain option in a dropdown, another port is hidden.\n\n\n    "
input EffectInput {
  function: ValidatorFunction!
  dependencies: [String!] = []
  message: String = null
  kind: EffectKind!
  hook: String = null
  ward: String = null
}

"Port\n\n    A Port is a single input or output of a node. It is composed of a key and a kind\n    which are used to uniquely identify the port.\n\n    If the Port is a structure, we need to define a identifier and scope,\n    Identifiers uniquely identify a specific type of model for the scopes (e.g\n    all the ports that have the identifier \"@mikro/image\" are of the same type, and\n    are hence compatible with each other). Scopes are used to define in which context\n    the identifier is valid (e.g. a port with the identifier \"@mikro/image\" and the\n    scope \"local\", can only be wired to other ports that have the same identifier and\n    are running in the same app). Global ports are ports that have the scope \"global\",\n    and can be wired to any other port that has the same identifier, as there exists a\n    mechanism to resolve and retrieve the object for each app. Please check the rekuest\n    documentation for more information on how this works.\n\n\n    "
input PortInput {
  validators: [ValidatorInput!] = null
  key: String!
  scope: PortScope!
  label: String = null
  kind: PortKind!
  description: String = null
  identifier: String = null
  nullable: Boolean! = false
  effects: [EffectInput!] = null
  default: AnyDefault = null
  children: [PortInput!] = null
  assignWidget: AssignWidgetInput = null
  returnWidget: ReturnWidgetInput = null
}

" \nA validating function for a port. Can specify a function that will run when validating values of the port.\nIf outside dependencies are needed they need to be specified in the dependencies field. With the .. syntax\nwhen transversing the tree of ports. \n\n"
input ValidatorInput {
  function: ValidatorFunction!
  dependencies: [String!] = []
  label: String = null
  errorMessage: String = null
}

input AssignWidgetInput {
  """
  Whether to display the input as a paragraph or not. This is used for text inputs and dropdowns
  """
  asParagraph: Boolean = null
  kind: AssignWidgetKind!
  query: SearchQuery = null
  choices: [ChoiceInput!] = null
  min: Float = null
  max: Float = null
  step: Float = null
  placeholder: String = null
  hook: String = null
  ward: String = null
  fallback: AssignWidgetInput = null
  filters: [PortInput!] = null
  dependencies: [String!] = null
}

"""
The `ArrayLike` scalar type represents a reference to a store previously created by the user n a datalayer
"""
scalar SearchQuery

"\nA choice is a value that can be selected in a dropdown.\n\nIt is composed of a value, a label, and a description. The value is the\nvalue that is returned when the choice is selected. The label is the\ntext that is displayed in the dropdown. The description is the text\nthat is displayed when the user hovers over the choice.\n\n    "
input ChoiceInput {
  value: AnyDefault!
  label: String!
  image: String = null
  description: String = null
}

"A Return Widget is a UI element that is used to display the value of a port.\n\n    Return Widgets get displayed both if we show the return values of an assignment,\n    but also when we inspect the given arguments of a previous run task. Their primary\n    usecase is to adequately display the value of a port, in a user readable way.\n\n    Return Widgets are often overwriten by the underlying UI framework (e.g. Orkestrator)\n    to provide a better user experience. For example, a return widget that displays a\n    date could be overwriten to display a calendar widget.\n\n    Return Widgets provide more a way to customize this overwriten behavior.\n\n    "
input ReturnWidgetInput {
  kind: ReturnWidgetKind!
  query: SearchQuery = null
  choices: [ChoiceInput!] = null
  min: Int = null
  max: Int = null
  step: Int = null
  placeholder: String = null
  hook: String = null
  ward: String = null
}

"""
A dependency for a template. By defining dependencies, you can
    create a dependency graph for your templates and nodes
"""
input DependencyInput {
  hash: NodeHash
  reference: String = null
  binds: BindsInput = null
  optional: Boolean! = false
  viableInstances: Int = null
}

input BindsInput {
  templates: [String!] = null
  clients: [String!] = null
  desiredInstances: Int! = 1
}

"""The input for creating a template in another agents extension."""
input CreateForeignTemplateInput {
  """
  The agent ID to create the template in. This is used to identify the agent in the system.
  """
  agent: ID!
  template: TemplateInput!
  extension: String!
}

"""The input for setting extension templates."""
input SetExtensionTemplatesInput {
  """
  The templates to set. This is used to identify the templates in the system.
  """
  templates: [TemplateInput!]!
  instanceId: InstanceId!
  extension: String!
  runCleanup: Boolean! = false
}

input AckInput {
  assignation: ID!
}

"""The input for assigning args to a node."""
input AssignInput {
  instanceId: InstanceId!
  node: ID = null
  template: ID = null
  agent: ID = null
  nodeHash: NodeHash = null
  reservation: ID = null
  interface: String = null
  hooks: [HookInput!] = null
  args: Args!
  reference: String = "fc024349-3d2c-4071-8d69-60d60604529b"
  parent: ID = null
  cached: Boolean! = false
  log: Boolean! = false
  ephemeral: Boolean! = false
  isHook: Boolean = false
  step: Boolean = false
}

"""
A hook is a function that is called when a node has reached a specific lifecycle point. Hooks are jsut nodes that take an assignation as input and return a value.
"""
input HookInput {
  kind: HookKind!
  hash: NodeHash!
}

enum HookKind {
  CLEANUP
  INIT
}

"""The input for canceling an assignation."""
input CancelInput {
  assignation: ID!
}

"""
The input for stepping an assignation. Stepping is used to go from one breakpoint to another.
"""
input StepInput {
  assignation: ID!
}

"""The input for pausing an assignation."""
input PauseInput {
  assignation: ID!
}

"""The input for resuming an assignation."""
input ResumeInput {
  assignation: ID!
}

"""The input for interrupting an assignation."""
input InterruptInput {
  assignation: ID!
}

"""The input for reserving a node."""
input ReserveInput {
  reference: String = "58096569-e797-4066-a1b4-4b5500d3511e"
  instanceId: InstanceId! = "default"
  node: ID = null
  template: ID = null
  title: String = null
  hash: NodeHash = null
  binds: BindsInput = null
  assignationId: ID = null
}

input UnreserveInput {
  reservation: ID!
}

"""The input for deleting a template."""
input DeleteTemplateInput {
  template: ID!
}

input AgentInput {
  """
  The instance ID of the agent. This is used to identify the agent in the system.
  """
  instanceId: InstanceId!

  """
  The name of the agent. This is used to identify the agent in the system.
  """
  name: String = null

  """
  The extensions of the agent. This is used to identify the agent in the system.
  """
  extensions: [String!] = null
}

input CreateTestCaseInput {
  node: ID!
  tester: ID!
  description: String = null
  name: String = null
}

input CreateTestResultInput {
  case: ID!
  tester: ID!
  template: ID!
  passed: Boolean!
  result: String = null
}

input CreateHardwareRecordInput {
  cpuCount: Int = null
  cpuFrequency: Float = null
  cpuVendorName: String = null
  instanceId: InstanceId = null
}

"""The input for creating a dashboard."""
input CreateDashboardInput {
  name: String = null
  panels: [ID!] = null
  tree: UITreeInput = null
}

input UITreeInput {
  child: UIChildInput!
}

input UIChildInput {
  state: String = null
  kind: UIChildKind!
  hidden: Boolean
  children: [UIChildInput!] = null
  left: UIChildInput = null
  right: UIChildInput = null
}

"""The input for creating a state schema."""
input CreateStateSchemaInput {
  stateSchema: StateSchemaInput!
}

"""The input for creating a state schema."""
input StateSchemaInput {
  ports: [PortInput!]!
  name: String!
}

input CreatePanelInput {
  name: String!
  kind: PanelKind!
  state: ID = null
  stateKey: String = null
  reservation: ID = null
  instanceId: InstanceId = null
  stateAccessors: [String!] = null
  interface: String = null
  args: Args = null
  submitOnChange: Boolean = false
  submitOnLoad: Boolean = false
}

"""The input for setting a state schema."""
input SetStateInput {
  stateSchema: ID!
  instanceId: InstanceId!
  value: Args!
}

"""The input for updating a state schema."""
input UpdateStateInput {
  stateSchema: ID!
  instanceId: InstanceId!
  patches: [Args!]!
}

"""The input for archiving a state schema."""
input ArchiveStateInput {
  stateSchema: ID!
}

"""The input for pinning an model."""
input PinInput {
  id: ID!
  pin: Boolean!
}

"""The input for creating a shortcut."""
input CreateShortcutInput {
  """
  The toolbox ID to create the shortcut in. If not provided, the shortcut will be created in the default toolbox.
  """
  toolbox: ID = null
  name: String!
  description: String = null
  node: ID!
  template: ID = null
  args: Args!
  allowQuick: Boolean! = false
  useReturns: Boolean! = false
}

"""The input for deleting a shortcut."""
input DeleteShortcutInput {
  id: ID!
}

"""The input for creating a toolbox."""
input CreateToolboxInput {
  name: String!
  description: String
}

"""The input for collecting a shelved item in a drawer."""
input CollectInput {
  drawers: [ID!]!
}

input ReInitInput {
  agent: ID = null
}

input DeleteAgentInput {
  """
  The ID of the agent to delete. This is used to identify the agent in the system.
  """
  id: ID!
}

type Subscription {
  newNodes(cage: ID!): Node!
  assignations(instanceId: InstanceId!): AssignationChangeEvent!
  reservations(instanceId: InstanceId!): Reservation!
  assignationEvents(instanceId: InstanceId!): AssignationEvent!
  agents: AgentChangeEvent!
  templateChange(template: ID!): Template!
  templates(agent: ID!): TemplateUpdate!
  stateUpdateEvents(stateId: ID!): State!
}

type AssignationChangeEvent {
  event: AssignationEvent
  create: Assignation
}

type AgentChangeEvent {
  update: Agent
  create: Agent
  delete: ID
}

type TemplateUpdate {
  create: Template!
  update: Template!
  delete: ID!
}